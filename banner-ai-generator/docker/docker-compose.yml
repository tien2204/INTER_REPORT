version: '3.8'

services:
  # Redis for message queue and caching
  redis:
    image: redis:7-alpine
    container_name: banner_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database (optional, can use SQLite for development)
  postgres:
    image: postgres:15-alpine
    container_name: banner_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: banner_generator
      POSTGRES_USER: banner_user
      POSTGRES_PASSWORD: banner_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U banner_user -d banner_generator"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Banner Generator API
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: banner_api
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://banner_user:banner_password@postgres:5432/banner_generator
      - REDIS_URL=redis://redis:6379
      - DEBUG=true
      - LOG_LEVEL=INFO
      - SECRET_KEY=development-secret-key-change-in-production
      - JWT_SECRET=development-jwt-secret-change-in-production
    ports:
      - "8000:8000"
    volumes:
      - ../uploads:/app/uploads
      - ../temp:/app/temp
      - ../output:/app/output
      - ../logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Agent Workers
  agents:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: banner_agents
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://banner_user:banner_password@postgres:5432/banner_generator
      - REDIS_URL=redis://redis:6379
      - DEBUG=true
      - LOG_LEVEL=INFO
      - SECRET_KEY=development-secret-key-change-in-production
      - JWT_SECRET=development-jwt-secret-change-in-production
      # AI Model API Keys (add your actual keys)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FLUX_API_URL=${FLUX_API_URL}
      - FLUX_API_KEY=${FLUX_API_KEY}
    volumes:
      - ../uploads:/app/uploads
      - ../temp:/app/temp
      - ../output:/app/output
      - ../logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    command: ["python", "main.py", "agents"]

  # Frontend (Vue.js)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: banner_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8000
    depends_on:
      - api

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: banner_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: banner_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: banner_network
